name: Pull Request Checks

on:
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: "20"

jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: |
          cd apps/frontend && npm run lint
          cd ../api
          if node -e "console.log(require('./package.json').scripts.lint ? 'exists' : 'missing')" | grep -q "exists"; then
            echo "Running API lint script..."
            npm run lint
          else
            echo "No lint script found in API package.json"
          fi

      - name: Check TypeScript
        run: |
          cd apps/frontend && npx tsc --noEmit
          cd ../api && npx tsc --noEmit

  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run API tests
        run: npm run test

      - name: Run frontend tests
        run: |
          cd apps/frontend
          if node -e "console.log(require('./package.json').scripts.test ? 'exists' : 'missing')" | grep -q "exists"; then
            echo "Running frontend test script..."
            npm run test
          else
            echo "No test script found in frontend package.json"
          fi

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            apps/api/test-results.xml
            apps/frontend/test-results.xml

  build-check:
    name: Build Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build frontend
        run: npm run frontend:build

      - name: Build API
        run: npm run api:build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-check-artifacts
          path: |
            apps/frontend/dist/
            apps/api/dist/

  security-check:
    name: Security Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Check for vulnerabilities
        run: |
          npx audit-ci --config audit-ci.json || echo "Audit CI not configured"

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate

  pr-comment:
    name: PR Comment
    runs-on: ubuntu-latest
    needs: [lint-and-format, test, build-check, security-check]
    if: always()

    steps:
      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('## CI/CD Status')
            );

            const status = {
              'lint-and-format': '${{ needs.lint-and-format.result }}',
              'test': '${{ needs.test.result }}',
              'build-check': '${{ needs.build-check.result }}',
              'security-check': '${{ needs.security-check.result }}'
            };

            const statusEmoji = (status) => {
              switch(status) {
                case 'success': return '✅';
                case 'failure': return '❌';
                case 'cancelled': return '⏹️';
                case 'skipped': return '⏭️';
                default: return '⏳';
              }
            };

            const comment = `## CI/CD Status

            | Check | Status |
            |-------|--------|
            | Lint & Format | ${statusEmoji(status['lint-and-format'])} |
            | Tests | ${statusEmoji(status['test'])} |
            | Build | ${statusEmoji(status['build-check'])} |
            | Security | ${statusEmoji(status['security-check'])} |

            **Overall Status:** ${{ job.status }}
            `;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }
