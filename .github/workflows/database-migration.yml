name: Database Migration

on:
  push:
    branches: [main, develop]
    paths:
      - "apps/api/src/lib/db/**"
      - "apps/api/scripts/**"
      - "apps/api/src/data/**"
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        required: true
        default: "development"
        type: choice
        options:
          - development
          - staging
          - production

env:
  NODE_VERSION: "20"

jobs:
  migrate-database:
    name: Run Database Migration
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'development') }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set environment variables
        run: |
          cat >> "$GITHUB_ENV" << EOF
          PGHOST=${{ secrets.PGHOST }}
          PGPORT=${{ secrets.PGPORT }}
          PGUSER=${{ secrets.PGUSER }}
          PGPASSWORD=${{ secrets.PGPASSWORD }}
          PGDATABASE=${{ secrets.PGDATABASE }}
          PGSSLMODE=${{ secrets.PGSSLMODE || 'require' }}
          BLOB_BASE_URL=${{ secrets.BLOB_BASE_URL }}
          EOF

      - name: Run database initialization
        run: |
          cd apps/api
          npm run db:init:ps || npm run db:init:bash

      - name: Verify database schema
        run: |
          cd apps/api
          node <<'NODE'
          const { Client } = require('pg');

          // Configure SSL based on environment variables
          const sslMode = process.env.PGSSLMODE || process.env.PGSSL_REQUIRE;
          const sslConfig = sslMode && sslMode.toLowerCase() !== 'disable'
            ? { rejectUnauthorized: true, ...(process.env.PGSSL_CERT && { ca: process.env.PGSSL_CERT }) }
            : false;

          const client = new Client({
            host: process.env.PGHOST,
            port: Number(process.env.PGPORT),
            user: process.env.PGUSER,
            password: process.env.PGPASSWORD,
            database: process.env.PGDATABASE,
            ssl: sslConfig
          });

          (async () => {
            try {
              await client.connect();
              const { rows } = await client.query('SELECT COUNT(*)::int AS count FROM listings');
              console.log('Listings count:', rows[0].count);
            } catch (err) {
              console.error('Database verification failed:', err);
              process.exit(1);
            } finally {
              await client.end();
            }
          })();
          NODE

      - name: Upload migration logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: migration-logs
          path: |
            apps/api/migration.log
            apps/api/error.log

  seed-data:
    name: Seed Database
    runs-on: ubuntu-latest
    needs: migrate-database
    if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set environment variables
        run: |
          cat >> "$GITHUB_ENV" << EOF
          PGHOST=${{ secrets.PGHOST }}
          PGPORT=${{ secrets.PGPORT }}
          PGUSER=${{ secrets.PGUSER }}
          PGPASSWORD=${{ secrets.PGPASSWORD }}
          PGDATABASE=${{ secrets.PGDATABASE }}
          PGSSLMODE=${{ secrets.PGSSLMODE || 'require' }}
          EOF

      - name: Seed database with sample data
        run: |
          cd apps/api
          node <<'NODE'
          const fs = require('fs');
          const path = require('path');
          const { Client } = require('pg');

          // Configure SSL based on environment variables
          const sslMode = process.env.PGSSLMODE || process.env.PGSSL_REQUIRE;
          const sslConfig = sslMode && sslMode.toLowerCase() !== 'disable'
            ? { rejectUnauthorized: true, ...(process.env.PGSSL_CERT && { ca: process.env.PGSSL_CERT }) }
            : false;

          const client = new Client({
            host: process.env.PGHOST,
            port: Number(process.env.PGPORT),
            user: process.env.PGUSER,
            password: process.env.PGPASSWORD,
            database: process.env.PGDATABASE,
            ssl: sslConfig
          });

          (async () => {
            try {
              await client.connect();
              const { rows } = await client.query('SELECT COUNT(*)::int AS count FROM listings');
              const count = rows[0].count;
              if (count === 0) {
                console.log('Seeding database with sample data...');
                const listings = JSON.parse(fs.readFileSync(path.join(process.cwd(), 'src/data/listings.json'), 'utf8'));
                await client.query('BEGIN');
                for (const listing of listings) {
                  const { id, ...data } = listing;
                  const cols = Object.keys(data);
                  const placeholders = cols.map((_, i) => `$${i + 1}`).join(', ');
                  await client.query(
                    `INSERT INTO listings (${cols.join(', ')}) VALUES (${placeholders}) ON CONFLICT (id) DO NOTHING`,
                    Object.values(data)
                  );
                }
                await client.query('COMMIT');
              } else {
                console.log(`Database already has ${count} listings`);
              }
            } catch (err) {
              try { await client.query('ROLLBACK'); } catch {}
              console.error('Seeding failed:', err);
              process.exit(1);
            } finally {
              await client.end();
            }
          })();
          NODE

  notify:
    name: Notify Migration Status
    runs-on: ubuntu-latest
    needs: ["migrate-database", "seed-data"]
    if: always()
    steps:
      - name: Notify Teams
        uses: skitionek/notify-microsoft-teams@b1b3e4b
        with:
          webhook_url: ${{ secrets.TEAMS_WEBHOOK }}
          message: |
            Database Migration Complete

            Environment: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'development') }}
            Status: ${{ job.status }}

            Migration: ${{ needs["migrate-database"].result }}
            Seeding: ${{ needs["seed-data"].result || 'skipped' }}
            Commit: ${{ github.sha }}
            Triggered by: ${{ github.actor }}
