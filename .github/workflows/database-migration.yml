name: Database Migration

on:
  push:
    branches: [main, develop]
    paths:
      - "apps/api/src/lib/db/**"
      - "apps/api/scripts/**"
      - "apps/api/src/data/**"
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        required: true
        default: "development"
        type: choice
        options:
          - development
          - staging
          - production

env:
  NODE_VERSION: "20"

jobs:
  migrate-database:
    name: Run Database Migration
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'development') }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set environment variables
        run: |
          echo "PGHOST=${{ secrets.PGHOST }}" >> $GITHUB_ENV
          echo "PGPORT=${{ secrets.PGPORT }}" >> $GITHUB_ENV
          echo "PGUSER=${{ secrets.PGUSER }}" >> $GITHUB_ENV
          echo "PGPASSWORD=${{ secrets.PGPASSWORD }}" >> $GITHUB_ENV
          echo "PGDATABASE=${{ secrets.PGDATABASE }}" >> $GITHUB_ENV
          echo "BLOB_BASE_URL=${{ secrets.BLOB_BASE_URL }}" >> $GITHUB_ENV

      - name: Run database initialization
        run: |
          cd apps/api
          npm run db:init:ps || npm run db:init:bash

      - name: Verify database schema
        run: |
          cd apps/api
          node -e "
          const { Client } = require('pg');
          
          // Configure SSL based on environment variables
          const sslMode = process.env.PGSSLMODE || process.env.PGSSL_REQUIRE;
          const sslConfig = sslMode && sslMode.toLowerCase() !== 'disable' ? {
            rejectUnauthorized: true,
            ...(process.env.PGSSL_CERT && { ca: process.env.PGSSL_CERT })
          } : false;
          
          const client = new Client({
            host: process.env.PGHOST,
            port: process.env.PGPORT,
            user: process.env.PGUSER,
            password: process.env.PGPASSWORD,
            database: process.env.PGDATABASE,
            ssl: sslConfig
          });

          client.connect().then(() => {
            return client.query('SELECT COUNT(*) FROM listings');
          }).then(result => {
            console.log('Listings count:', result.rows[0].count);
            return client.end();
          }).catch(err => {
            console.error('Database verification failed:', err);
            process.exit(1);
          });
          "

      - name: Upload migration logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: migration-logs
          path: |
            apps/api/migration.log
            apps/api/error.log

  seed-data:
    name: Seed Database
    runs-on: ubuntu-latest
    needs: migrate-database
    if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set environment variables
        run: |
          echo "PGHOST=${{ secrets.PGHOST }}" >> $GITHUB_ENV
          echo "PGPORT=${{ secrets.PGPORT }}" >> $GITHUB_ENV
          echo "PGUSER=${{ secrets.PGUSER }}" >> $GITHUB_ENV
          echo "PGPASSWORD=${{ secrets.PGPASSWORD }}" >> $GITHUB_ENV
          echo "PGDATABASE=${{ secrets.PGDATABASE }}" >> $GITHUB_ENV

      - name: Seed database with sample data
        run: |
          cd apps/api
          node -e "
          const fs = require('fs');
          const path = require('path');
          const { Client } = require('pg');

          // Configure SSL based on environment variables
          const sslMode = process.env.PGSSLMODE || process.env.PGSSL_REQUIRE;
          const sslConfig = sslMode && sslMode.toLowerCase() !== 'disable' ? {
            rejectUnauthorized: true,
            ...(process.env.PGSSL_CERT && { ca: process.env.PGSSL_CERT })
          } : false;

          const client = new Client({
            host: process.env.PGHOST,
            port: process.env.PGPORT,
            user: process.env.PGUSER,
            password: process.env.PGPASSWORD,
            database: process.env.PGDATABASE,
            ssl: sslConfig
          });

          client.connect().then(() => {
            return client.query('SELECT COUNT(*) FROM listings');
          }).then(result => {
            const count = parseInt(result.rows[0].count);
            if (count === 0) {
              console.log('Seeding database with sample data...');
              const listings = JSON.parse(fs.readFileSync(path.join(__dirname, 'src/data/listings.json'), 'utf8'));
              
              const insertPromises = listings.map(listing => {
                const { id, ...data } = listing;
                const columns = Object.keys(data).join(', ');
                const values = Object.values(data).map(v => typeof v === 'string' ? \`'\${v.replace(/'/g, \"''\")}'\` : v).join(', ');
                const placeholders = Object.keys(data).map((_, i) => \`$\${i + 1}\`).join(', ');
                
                return client.query(
                  \`INSERT INTO listings (\${columns}) VALUES (\${placeholders}) ON CONFLICT (id) DO NOTHING\`,
                  Object.values(data)
                );
              });
              
              return Promise.all(insertPromises);
            } else {
              console.log(\`Database already has \${count} listings\`);
            }
          }).then(() => {
            return client.end();
          }).catch(err => {
            console.error('Seeding failed:', err);
            process.exit(1);
          });
          "

  notify:
    name: Notify Migration Status
    runs-on: ubuntu-latest
    needs: [migrate-database, seed-data]
    if: always()

    steps:
             - name: Notify Teams
               uses: skitionek/notify-microsoft-teams@master
               with:
                   webhook_url: ${{ secrets.TEAMS_WEBHOOK }}
                   message: |
                       üóÑÔ∏è **Database Migration Complete**

                       **Environment:** ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'development') }}
                       **Status:** ${{ job.status }}

                       **Migration:** ${{ needs.migrate-database.result }}
                       **Seeding:** ${{ needs.seed-data.result }}

                       **Commit:** ${{ github.sha }}
                       **Triggered by:** ${{ github.actor }}
