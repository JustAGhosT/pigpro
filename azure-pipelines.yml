# Azure DevOps Pipeline for Livestock Club SA
# Alternative to GitHub Actions for organizations using Azure DevOps

trigger:
- main
- develop

variables:
  nodeVersion: '18'
  azureServiceConnection: 'livestock-azure-connection'
  functionAppName: 'livestock-api'
  staticWebAppName: 'livestock-frontend'
  
stages:
- stage: Test
  displayName: 'Test Stage'
  jobs:
  - job: RunTests
    displayName: 'Run Tests'
    pool:
      vmImage: 'ubuntu-latest'
      
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: $(nodeVersion)
      displayName: 'Install Node.js'
      
    - script: |
        npm ci
      displayName: 'Install dependencies'
      
    - script: |
        npm run test:all
      displayName: 'Run all tests'
      
    - script: |
        cd apps/frontend
        npm run lint
      displayName: 'Lint frontend'
      
    - task: PublishTestResults@2
      condition: always()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/test-results.xml'
        mergeTestResults: true

- stage: Build
  displayName: 'Build Stage'
  dependsOn: Test
  condition: succeeded()
  jobs:
  - job: BuildApplications
    displayName: 'Build Applications'
    pool:
      vmImage: 'ubuntu-latest'
      
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: $(nodeVersion)
      displayName: 'Install Node.js'
      
    - script: |
        npm ci
      displayName: 'Install dependencies'
      
    - script: |
        npm run frontend:build
      displayName: 'Build frontend'
      
    - script: |
        npm run api:build
      displayName: 'Build API'
      
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: 'apps/frontend'
        artifact: 'frontend-app'
        
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: 'apps/api'
        artifact: 'api-app'

- stage: DeployDev
  displayName: 'Deploy to Development'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
  jobs:
  - deployment: DeployToDev
    displayName: 'Deploy to Development Environment'
    environment: 'development'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: frontend-app
            
          - download: current
            artifact: api-app
            
          - task: AzureFunctionApp@1
            displayName: 'Deploy Azure Function'
            inputs:
              azureSubscription: $(azureServiceConnection)
              appType: 'functionApp'
              appName: '$(functionAppName)-dev'
              package: '$(Pipeline.Workspace)/api-app'
              
          - task: AzureStaticWebApp@1
            displayName: 'Deploy Static Web App'
            inputs:
              azure_subscription: $(azureServiceConnection)
              app_location: '$(Pipeline.Workspace)/frontend-app'
              output_location: 'dist'
              skip_app_build: true

- stage: DeployProd
  displayName: 'Deploy to Production'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: DeployToProd
    displayName: 'Deploy to Production Environment'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: frontend-app
            
          - download: current
            artifact: api-app
            
          - task: AzureFunctionApp@1
            displayName: 'Deploy Azure Function'
            inputs:
              azureSubscription: $(azureServiceConnection)
              appType: 'functionApp'
              appName: $(functionAppName)
              package: '$(Pipeline.Workspace)/api-app'
              
          - task: AzureStaticWebApp@1
            displayName: 'Deploy Static Web App'
            inputs:
              azure_subscription: $(azureServiceConnection)
              app_location: '$(Pipeline.Workspace)/frontend-app'
              output_location: 'dist'
              skip_app_build: true
              
          - task: AzureCLI@2
            displayName: 'Update Application Settings'
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Update function app settings
                az functionapp config appsettings set \
                  --name $(functionAppName) \
                  --resource-group livestock-rg \
                  --settings \
                    BLOB_BASE_URL="https://livestocksa123abc.blob.core.windows.net/livestock-images" \
                    NODE_ENV="production"
